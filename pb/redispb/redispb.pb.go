// Code generated by protoc-gen-gogo.
// source: redispb.proto
// DO NOT EDIT!

/*
	Package redispb is a generated protocol buffer package.

	It is generated from these files:
		redispb.proto

	It has these top-level messages:
		RedisArgs
		RedisResponse
*/
package redispb

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// RedisArgs the redis args
type RedisArgs struct {
	Args [][]byte `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
}

func (m *RedisArgs) Reset()                    { *m = RedisArgs{} }
func (m *RedisArgs) String() string            { return proto.CompactTextString(m) }
func (*RedisArgs) ProtoMessage()               {}
func (*RedisArgs) Descriptor() ([]byte, []int) { return fileDescriptorRedispb, []int{0} }

func (m *RedisArgs) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

// RedisResponse redis response
type RedisResponse struct {
	ErrorResult                  []byte   `protobuf:"bytes,1,opt,name=errorResult,proto3" json:"errorResult,omitempty"`
	ErrorResults                 [][]byte `protobuf:"bytes,2,rep,name=errorResults" json:"errorResults,omitempty"`
	StatusResult                 []byte   `protobuf:"bytes,3,opt,name=statusResult,proto3" json:"statusResult,omitempty"`
	IntegerResult                int64    `protobuf:"varint,4,opt,name=integerResult,proto3" json:"integerResult,omitempty"`
	BulkResult                   []byte   `protobuf:"bytes,5,opt,name=bulkResult,proto3" json:"bulkResult,omitempty"`
	HasEmptyBulkResult           bool     `protobuf:"varint,6,opt,name=hasEmptyBulkResult,proto3" json:"hasEmptyBulkResult,omitempty"`
	SliceArrayResult             [][]byte `protobuf:"bytes,7,rep,name=sliceArrayResult" json:"sliceArrayResult,omitempty"`
	HasEmptySliceArrayResult     bool     `protobuf:"varint,8,opt,name=hasEmptySliceArrayResult,proto3" json:"hasEmptySliceArrayResult,omitempty"`
	FvPairArrayResult            [][]byte `protobuf:"bytes,9,rep,name=fvPairArrayResult" json:"fvPairArrayResult,omitempty"`
	HasEmptyFVPairArrayResult    bool     `protobuf:"varint,10,opt,name=hasEmptyFVPairArrayResult,proto3" json:"hasEmptyFVPairArrayResult,omitempty"`
	ScorePairArrayResult         [][]byte `protobuf:"bytes,11,rep,name=scorePairArrayResult" json:"scorePairArrayResult,omitempty"`
	HasEmptyScorePairArrayResult bool     `protobuf:"varint,12,opt,name=hasEmptyScorePairArrayResult,proto3" json:"hasEmptyScorePairArrayResult,omitempty"`
	Withscores                   bool     `protobuf:"varint,13,opt,name=withscores,proto3" json:"withscores,omitempty"`
}

func (m *RedisResponse) Reset()                    { *m = RedisResponse{} }
func (m *RedisResponse) String() string            { return proto.CompactTextString(m) }
func (*RedisResponse) ProtoMessage()               {}
func (*RedisResponse) Descriptor() ([]byte, []int) { return fileDescriptorRedispb, []int{1} }

func (m *RedisResponse) GetErrorResult() []byte {
	if m != nil {
		return m.ErrorResult
	}
	return nil
}

func (m *RedisResponse) GetErrorResults() [][]byte {
	if m != nil {
		return m.ErrorResults
	}
	return nil
}

func (m *RedisResponse) GetStatusResult() []byte {
	if m != nil {
		return m.StatusResult
	}
	return nil
}

func (m *RedisResponse) GetIntegerResult() int64 {
	if m != nil {
		return m.IntegerResult
	}
	return 0
}

func (m *RedisResponse) GetBulkResult() []byte {
	if m != nil {
		return m.BulkResult
	}
	return nil
}

func (m *RedisResponse) GetHasEmptyBulkResult() bool {
	if m != nil {
		return m.HasEmptyBulkResult
	}
	return false
}

func (m *RedisResponse) GetSliceArrayResult() [][]byte {
	if m != nil {
		return m.SliceArrayResult
	}
	return nil
}

func (m *RedisResponse) GetHasEmptySliceArrayResult() bool {
	if m != nil {
		return m.HasEmptySliceArrayResult
	}
	return false
}

func (m *RedisResponse) GetFvPairArrayResult() [][]byte {
	if m != nil {
		return m.FvPairArrayResult
	}
	return nil
}

func (m *RedisResponse) GetHasEmptyFVPairArrayResult() bool {
	if m != nil {
		return m.HasEmptyFVPairArrayResult
	}
	return false
}

func (m *RedisResponse) GetScorePairArrayResult() [][]byte {
	if m != nil {
		return m.ScorePairArrayResult
	}
	return nil
}

func (m *RedisResponse) GetHasEmptyScorePairArrayResult() bool {
	if m != nil {
		return m.HasEmptyScorePairArrayResult
	}
	return false
}

func (m *RedisResponse) GetWithscores() bool {
	if m != nil {
		return m.Withscores
	}
	return false
}

func init() {
	proto.RegisterType((*RedisArgs)(nil), "redispb.RedisArgs")
	proto.RegisterType((*RedisResponse)(nil), "redispb.RedisResponse")
}
func (m *RedisArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisArgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRedispb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *RedisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ErrorResult) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRedispb(dAtA, i, uint64(len(m.ErrorResult)))
		i += copy(dAtA[i:], m.ErrorResult)
	}
	if len(m.ErrorResults) > 0 {
		for _, b := range m.ErrorResults {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRedispb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.StatusResult) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRedispb(dAtA, i, uint64(len(m.StatusResult)))
		i += copy(dAtA[i:], m.StatusResult)
	}
	if m.IntegerResult != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRedispb(dAtA, i, uint64(m.IntegerResult))
	}
	if len(m.BulkResult) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRedispb(dAtA, i, uint64(len(m.BulkResult)))
		i += copy(dAtA[i:], m.BulkResult)
	}
	if m.HasEmptyBulkResult {
		dAtA[i] = 0x30
		i++
		if m.HasEmptyBulkResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SliceArrayResult) > 0 {
		for _, b := range m.SliceArrayResult {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRedispb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.HasEmptySliceArrayResult {
		dAtA[i] = 0x40
		i++
		if m.HasEmptySliceArrayResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FvPairArrayResult) > 0 {
		for _, b := range m.FvPairArrayResult {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRedispb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.HasEmptyFVPairArrayResult {
		dAtA[i] = 0x50
		i++
		if m.HasEmptyFVPairArrayResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ScorePairArrayResult) > 0 {
		for _, b := range m.ScorePairArrayResult {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintRedispb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.HasEmptyScorePairArrayResult {
		dAtA[i] = 0x60
		i++
		if m.HasEmptyScorePairArrayResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Withscores {
		dAtA[i] = 0x68
		i++
		if m.Withscores {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Redispb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Redispb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRedispb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RedisArgs) Size() (n int) {
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	return n
}

func (m *RedisResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ErrorResult)
	if l > 0 {
		n += 1 + l + sovRedispb(uint64(l))
	}
	if len(m.ErrorResults) > 0 {
		for _, b := range m.ErrorResults {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	l = len(m.StatusResult)
	if l > 0 {
		n += 1 + l + sovRedispb(uint64(l))
	}
	if m.IntegerResult != 0 {
		n += 1 + sovRedispb(uint64(m.IntegerResult))
	}
	l = len(m.BulkResult)
	if l > 0 {
		n += 1 + l + sovRedispb(uint64(l))
	}
	if m.HasEmptyBulkResult {
		n += 2
	}
	if len(m.SliceArrayResult) > 0 {
		for _, b := range m.SliceArrayResult {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	if m.HasEmptySliceArrayResult {
		n += 2
	}
	if len(m.FvPairArrayResult) > 0 {
		for _, b := range m.FvPairArrayResult {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	if m.HasEmptyFVPairArrayResult {
		n += 2
	}
	if len(m.ScorePairArrayResult) > 0 {
		for _, b := range m.ScorePairArrayResult {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	if m.HasEmptyScorePairArrayResult {
		n += 2
	}
	if m.Withscores {
		n += 2
	}
	return n
}

func sovRedispb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRedispb(x uint64) (n int) {
	return sovRedispb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RedisArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedispb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedispb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedispb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedispb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorResult = append(m.ErrorResult[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrorResult == nil {
				m.ErrorResult = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResults", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorResults = append(m.ErrorResults, make([]byte, postIndex-iNdEx))
			copy(m.ErrorResults[len(m.ErrorResults)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusResult = append(m.StatusResult[:0], dAtA[iNdEx:postIndex]...)
			if m.StatusResult == nil {
				m.StatusResult = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegerResult", wireType)
			}
			m.IntegerResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntegerResult |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulkResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BulkResult = append(m.BulkResult[:0], dAtA[iNdEx:postIndex]...)
			if m.BulkResult == nil {
				m.BulkResult = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptyBulkResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEmptyBulkResult = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceArrayResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceArrayResult = append(m.SliceArrayResult, make([]byte, postIndex-iNdEx))
			copy(m.SliceArrayResult[len(m.SliceArrayResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptySliceArrayResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEmptySliceArrayResult = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FvPairArrayResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FvPairArrayResult = append(m.FvPairArrayResult, make([]byte, postIndex-iNdEx))
			copy(m.FvPairArrayResult[len(m.FvPairArrayResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptyFVPairArrayResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEmptyFVPairArrayResult = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScorePairArrayResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScorePairArrayResult = append(m.ScorePairArrayResult, make([]byte, postIndex-iNdEx))
			copy(m.ScorePairArrayResult[len(m.ScorePairArrayResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptyScorePairArrayResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEmptyScorePairArrayResult = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withscores", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Withscores = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRedispb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedispb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedispb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedispb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRedispb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRedispb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRedispb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRedispb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedispb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("redispb.proto", fileDescriptorRedispb) }

var fileDescriptorRedispb = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0x66, 0x05, 0xf9, 0x19, 0xda, 0x44, 0x27, 0x1c, 0xaa, 0x31, 0xb5, 0x21, 0x1e, 0x1a, 0xa3,
	0x90, 0xe8, 0xcd, 0x78, 0x81, 0x44, 0xcf, 0x66, 0x4d, 0xbc, 0xb7, 0xb8, 0x94, 0x46, 0x60, 0x9b,
	0xdd, 0xad, 0x86, 0xb7, 0xf0, 0xb1, 0x3c, 0x72, 0xf7, 0xa2, 0xf8, 0x22, 0x86, 0xb1, 0x68, 0xf9,
	0xf3, 0x36, 0xdf, 0x7f, 0x9b, 0x16, 0x6c, 0x25, 0x1e, 0x63, 0x9d, 0x84, 0xad, 0x44, 0x49, 0x23,
	0xb1, 0x92, 0xc1, 0xc3, 0xf3, 0x28, 0x36, 0x83, 0x34, 0x6c, 0xf5, 0xe4, 0xa8, 0x1d, 0xc9, 0x48,
	0xb6, 0x49, 0x0f, 0xd3, 0x3e, 0x21, 0x02, 0x74, 0xfd, 0xe4, 0x9a, 0xc7, 0x50, 0xe3, 0xf3, 0x64,
	0x47, 0x45, 0x1a, 0x11, 0x4a, 0x81, 0x8a, 0xb4, 0xc3, 0xbc, 0xa2, 0x6f, 0x71, 0xba, 0x9b, 0xef,
	0x25, 0xb0, 0xc9, 0xc1, 0x85, 0x4e, 0xe4, 0x58, 0x0b, 0xf4, 0xa0, 0x2e, 0x94, 0x92, 0x8a, 0x0b,
	0x9d, 0x0e, 0x8d, 0xc3, 0x3c, 0xe6, 0x5b, 0x3c, 0x4f, 0x61, 0x13, 0xac, 0x1c, 0xd4, 0xce, 0x0e,
	0xf5, 0x2d, 0x71, 0x73, 0x8f, 0x36, 0x81, 0x49, 0x75, 0x56, 0x53, 0xa4, 0x9a, 0x25, 0x0e, 0x4f,
	0xc0, 0x8e, 0xc7, 0x46, 0x44, 0x62, 0xb1, 0x55, 0xf2, 0x98, 0x5f, 0xe4, 0xcb, 0x24, 0xba, 0x00,
	0x61, 0x3a, 0x7c, 0xca, 0x2c, 0xbb, 0xd4, 0x93, 0x63, 0xb0, 0x05, 0x38, 0x08, 0xf4, 0xcd, 0x28,
	0x31, 0x93, 0xee, 0x9f, 0xaf, 0xec, 0x31, 0xbf, 0xca, 0x37, 0x28, 0x78, 0x0a, 0x7b, 0x7a, 0x18,
	0xf7, 0x44, 0x47, 0xa9, 0x60, 0x92, 0xb9, 0x2b, 0xf4, 0x06, 0x6b, 0x3c, 0x5e, 0x81, 0xb3, 0x68,
	0xb8, 0x5f, 0xcd, 0x54, 0x69, 0x61, 0xab, 0x8e, 0x67, 0xb0, 0xdf, 0x7f, 0xbe, 0x0b, 0x62, 0x95,
	0x0f, 0xd5, 0x68, 0x68, 0x5d, 0xc0, 0x6b, 0x38, 0x58, 0x34, 0xdd, 0x3e, 0xac, 0xa6, 0x80, 0xa6,
	0xb6, 0x1b, 0xf0, 0x02, 0x1a, 0xba, 0x27, 0x95, 0x58, 0x0d, 0xd6, 0x69, 0x6e, 0xa3, 0x86, 0x5d,
	0x38, 0xfa, 0x7d, 0xf6, 0x4d, 0x59, 0x8b, 0x46, 0xff, 0xf5, 0xcc, 0xbf, 0xcd, 0x4b, 0x6c, 0x06,
	0xd4, 0xaf, 0x1d, 0x9b, 0x12, 0x39, 0xa6, 0xdb, 0x98, 0x7e, 0xba, 0x85, 0xb7, 0x99, 0xcb, 0xa6,
	0x33, 0x97, 0x7d, 0xcc, 0x5c, 0xf6, 0xfa, 0xe5, 0x16, 0xc2, 0x32, 0xfd, 0x9b, 0x97, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xe5, 0x08, 0x7e, 0xc7, 0xe4, 0x02, 0x00, 0x00,
}
