// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: redispb.proto

package redispb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RedisRespType redis response type
type RedisRespType int32

const (
	ErrorResp          RedisRespType = 0
	ErrorsResp         RedisRespType = 1
	StatusResp         RedisRespType = 2
	IntegerResp        RedisRespType = 3
	BulkResp           RedisRespType = 4
	SliceArrayResp     RedisRespType = 5
	KVPairArrayResp    RedisRespType = 6
	ScorePairArrayResp RedisRespType = 7
)

var RedisRespType_name = map[int32]string{
	0: "ErrorResp",
	1: "ErrorsResp",
	2: "StatusResp",
	3: "IntegerResp",
	4: "BulkResp",
	5: "SliceArrayResp",
	6: "KVPairArrayResp",
	7: "ScorePairArrayResp",
}

var RedisRespType_value = map[string]int32{
	"ErrorResp":          0,
	"ErrorsResp":         1,
	"StatusResp":         2,
	"IntegerResp":        3,
	"BulkResp":           4,
	"SliceArrayResp":     5,
	"KVPairArrayResp":    6,
	"ScorePairArrayResp": 7,
}

func (x RedisRespType) String() string {
	return proto.EnumName(RedisRespType_name, int32(x))
}

func (RedisRespType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ecedc9f93feaa642, []int{0}
}

// RedisArgs the redis args
type RedisArgs struct {
	Args [][]byte `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *RedisArgs) Reset()         { *m = RedisArgs{} }
func (m *RedisArgs) String() string { return proto.CompactTextString(m) }
func (*RedisArgs) ProtoMessage()    {}
func (*RedisArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecedc9f93feaa642, []int{0}
}
func (m *RedisArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisArgs.Merge(m, src)
}
func (m *RedisArgs) XXX_Size() int {
	return m.Size()
}
func (m *RedisArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RedisArgs proto.InternalMessageInfo

func (m *RedisArgs) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

// RedisResponse redis response
type RedisResponse struct {
	Type                 RedisRespType `protobuf:"varint,1,opt,name=type,proto3,enum=redispb.RedisRespType" json:"type,omitempty"`
	ErrorResult          []byte        `protobuf:"bytes,2,opt,name=errorResult,proto3" json:"errorResult,omitempty"`
	ErrorResults         [][]byte      `protobuf:"bytes,3,rep,name=errorResults,proto3" json:"errorResults,omitempty"`
	StatusResult         []byte        `protobuf:"bytes,4,opt,name=statusResult,proto3" json:"statusResult,omitempty"`
	IntegerResult        int64         `protobuf:"varint,5,opt,name=integerResult,proto3" json:"integerResult,omitempty"`
	BulkResult           []byte        `protobuf:"bytes,6,opt,name=bulkResult,proto3" json:"bulkResult,omitempty"`
	SliceArrayResult     [][]byte      `protobuf:"bytes,7,rep,name=sliceArrayResult,proto3" json:"sliceArrayResult,omitempty"`
	KVPairArrayResult    [][]byte      `protobuf:"bytes,8,rep,name=kvPairArrayResult,proto3" json:"kvPairArrayResult,omitempty"`
	ScorePairArrayResult [][]byte      `protobuf:"bytes,9,rep,name=scorePairArrayResult,proto3" json:"scorePairArrayResult,omitempty"`
	Withscores           bool          `protobuf:"varint,10,opt,name=withscores,proto3" json:"withscores,omitempty"`
}

func (m *RedisResponse) Reset()         { *m = RedisResponse{} }
func (m *RedisResponse) String() string { return proto.CompactTextString(m) }
func (*RedisResponse) ProtoMessage()    {}
func (*RedisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecedc9f93feaa642, []int{1}
}
func (m *RedisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisResponse.Merge(m, src)
}
func (m *RedisResponse) XXX_Size() int {
	return m.Size()
}
func (m *RedisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedisResponse proto.InternalMessageInfo

func (m *RedisResponse) GetType() RedisRespType {
	if m != nil {
		return m.Type
	}
	return ErrorResp
}

func (m *RedisResponse) GetErrorResult() []byte {
	if m != nil {
		return m.ErrorResult
	}
	return nil
}

func (m *RedisResponse) GetErrorResults() [][]byte {
	if m != nil {
		return m.ErrorResults
	}
	return nil
}

func (m *RedisResponse) GetStatusResult() []byte {
	if m != nil {
		return m.StatusResult
	}
	return nil
}

func (m *RedisResponse) GetIntegerResult() int64 {
	if m != nil {
		return m.IntegerResult
	}
	return 0
}

func (m *RedisResponse) GetBulkResult() []byte {
	if m != nil {
		return m.BulkResult
	}
	return nil
}

func (m *RedisResponse) GetSliceArrayResult() [][]byte {
	if m != nil {
		return m.SliceArrayResult
	}
	return nil
}

func (m *RedisResponse) GetKVPairArrayResult() [][]byte {
	if m != nil {
		return m.KVPairArrayResult
	}
	return nil
}

func (m *RedisResponse) GetScorePairArrayResult() [][]byte {
	if m != nil {
		return m.ScorePairArrayResult
	}
	return nil
}

func (m *RedisResponse) GetWithscores() bool {
	if m != nil {
		return m.Withscores
	}
	return false
}

func init() {
	proto.RegisterEnum("redispb.RedisRespType", RedisRespType_name, RedisRespType_value)
	proto.RegisterType((*RedisArgs)(nil), "redispb.RedisArgs")
	proto.RegisterType((*RedisResponse)(nil), "redispb.RedisResponse")
}

func init() { proto.RegisterFile("redispb.proto", fileDescriptor_ecedc9f93feaa642) }

var fileDescriptor_ecedc9f93feaa642 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x75, 0x9a, 0x3f, 0xd3, 0x24, 0xdd, 0x0e, 0x50, 0x59, 0x08, 0x6d, 0xad, 0x88,
	0x83, 0x15, 0x89, 0x54, 0x2a, 0x4f, 0xd0, 0x20, 0x0e, 0x88, 0x0b, 0xda, 0x20, 0xee, 0x71, 0x58,
	0x5c, 0xab, 0xa1, 0xbb, 0xda, 0x5d, 0x83, 0xf2, 0x16, 0x3c, 0x01, 0xcf, 0xc0, 0x63, 0x70, 0xcc,
	0x91, 0x13, 0x82, 0xe4, 0x45, 0x90, 0xa7, 0x4e, 0x65, 0x27, 0xdc, 0xfc, 0x7d, 0xf3, 0xdb, 0x99,
	0x9d, 0x6f, 0x0d, 0x03, 0xab, 0x3e, 0xe6, 0xce, 0xa4, 0x13, 0x63, 0xb5, 0xd7, 0xd8, 0xa9, 0xe4,
	0xd3, 0x17, 0x59, 0xee, 0x6f, 0x8a, 0x74, 0xb2, 0xd0, 0x9f, 0x2f, 0x33, 0x9d, 0xe9, 0x4b, 0xaa,
	0xa7, 0xc5, 0x27, 0x52, 0x24, 0xe8, 0xeb, 0xfe, 0xdc, 0xe8, 0x02, 0x7a, 0xb2, 0x3c, 0x79, 0x6d,
	0x33, 0x87, 0x08, 0xad, 0xb9, 0xcd, 0x5c, 0xc4, 0xe2, 0x30, 0xe9, 0x4b, 0xfa, 0x1e, 0xfd, 0x08,
	0x61, 0x40, 0x84, 0x54, 0xce, 0xe8, 0x3b, 0xa7, 0x70, 0x0c, 0x2d, 0xbf, 0x32, 0x2a, 0x62, 0x31,
	0x4b, 0x86, 0x57, 0xe7, 0x93, 0xdd, 0x45, 0x1e, 0xa8, 0xf7, 0x2b, 0xa3, 0x24, 0x31, 0x18, 0xc3,
	0x89, 0xb2, 0x56, 0x5b, 0xa9, 0x5c, 0xb1, 0xf4, 0xd1, 0x51, 0xcc, 0x92, 0xbe, 0xac, 0x5b, 0x38,
	0x82, 0x7e, 0x4d, 0xba, 0x28, 0xa4, 0xd9, 0x0d, 0xaf, 0x64, 0x9c, 0x9f, 0xfb, 0xc2, 0x55, 0x6d,
	0x5a, 0xd4, 0xa6, 0xe1, 0xe1, 0x73, 0x18, 0xe4, 0x77, 0x5e, 0x65, 0x6a, 0x37, 0xeb, 0x38, 0x66,
	0x49, 0x28, 0x9b, 0x26, 0x0a, 0x80, 0xb4, 0x58, 0xde, 0x56, 0x48, 0x9b, 0xfa, 0xd4, 0x1c, 0x1c,
	0x03, 0x77, 0xcb, 0x7c, 0xa1, 0xae, 0xad, 0x9d, 0xaf, 0x2a, 0xaa, 0x43, 0x37, 0x3a, 0xf0, 0xf1,
	0x15, 0x9c, 0xdd, 0x7e, 0x79, 0x37, 0xcf, 0x6d, 0x1d, 0xee, 0x96, 0xf0, 0xf4, 0xc9, 0xe6, 0xf7,
	0xc5, 0xd9, 0xdb, 0x0f, 0x7b, 0x45, 0x79, 0xc8, 0xe3, 0x15, 0x3c, 0x76, 0x0b, 0x6d, 0xd5, 0x7e,
	0x9f, 0x1e, 0x0d, 0xfd, 0x6f, 0xad, 0x5c, 0xe2, 0x6b, 0xee, 0x6f, 0xa8, 0xe6, 0x22, 0x88, 0x59,
	0xd2, 0x95, 0x35, 0x67, 0xfc, 0x9d, 0xd5, 0x9e, 0xac, 0x7c, 0x0c, 0x1c, 0x40, 0xef, 0x75, 0x15,
	0xa8, 0xe1, 0x01, 0x0e, 0x01, 0x48, 0x12, 0xc0, 0x59, 0xa9, 0x67, 0xbb, 0x2c, 0x0d, 0x3f, 0xc2,
	0x53, 0x38, 0x79, 0xf3, 0x10, 0x9b, 0xe1, 0x21, 0xf6, 0xa1, 0x3b, 0xbd, 0x0f, 0xc9, 0xf0, 0x16,
	0x22, 0x0c, 0x67, 0xf5, 0x30, 0x0c, 0x3f, 0xc6, 0x47, 0x70, 0xda, 0xdc, 0xd7, 0xf0, 0x36, 0x9e,
	0x03, 0xce, 0xf6, 0x17, 0x30, 0xbc, 0x33, 0x7d, 0xb6, 0xfe, 0x2b, 0x82, 0x9f, 0x1b, 0xc1, 0xd6,
	0x1b, 0xc1, 0xfe, 0x6c, 0x04, 0xfb, 0xb6, 0x15, 0xc1, 0x7a, 0x2b, 0x82, 0x5f, 0x5b, 0x11, 0xa4,
	0x6d, 0xfa, 0x33, 0x5f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x26, 0x57, 0xdd, 0x6a, 0xe2, 0x02,
	0x00, 0x00,
}

func (m *RedisArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintRedispb(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RedisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Withscores {
		i--
		if m.Withscores {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.ScorePairArrayResult) > 0 {
		for iNdEx := len(m.ScorePairArrayResult) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScorePairArrayResult[iNdEx])
			copy(dAtA[i:], m.ScorePairArrayResult[iNdEx])
			i = encodeVarintRedispb(dAtA, i, uint64(len(m.ScorePairArrayResult[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.KVPairArrayResult) > 0 {
		for iNdEx := len(m.KVPairArrayResult) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KVPairArrayResult[iNdEx])
			copy(dAtA[i:], m.KVPairArrayResult[iNdEx])
			i = encodeVarintRedispb(dAtA, i, uint64(len(m.KVPairArrayResult[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SliceArrayResult) > 0 {
		for iNdEx := len(m.SliceArrayResult) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SliceArrayResult[iNdEx])
			copy(dAtA[i:], m.SliceArrayResult[iNdEx])
			i = encodeVarintRedispb(dAtA, i, uint64(len(m.SliceArrayResult[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BulkResult) > 0 {
		i -= len(m.BulkResult)
		copy(dAtA[i:], m.BulkResult)
		i = encodeVarintRedispb(dAtA, i, uint64(len(m.BulkResult)))
		i--
		dAtA[i] = 0x32
	}
	if m.IntegerResult != 0 {
		i = encodeVarintRedispb(dAtA, i, uint64(m.IntegerResult))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StatusResult) > 0 {
		i -= len(m.StatusResult)
		copy(dAtA[i:], m.StatusResult)
		i = encodeVarintRedispb(dAtA, i, uint64(len(m.StatusResult)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ErrorResults) > 0 {
		for iNdEx := len(m.ErrorResults) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ErrorResults[iNdEx])
			copy(dAtA[i:], m.ErrorResults[iNdEx])
			i = encodeVarintRedispb(dAtA, i, uint64(len(m.ErrorResults[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ErrorResult) > 0 {
		i -= len(m.ErrorResult)
		copy(dAtA[i:], m.ErrorResult)
		i = encodeVarintRedispb(dAtA, i, uint64(len(m.ErrorResult)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRedispb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedispb(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedispb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RedisArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	return n
}

func (m *RedisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRedispb(uint64(m.Type))
	}
	l = len(m.ErrorResult)
	if l > 0 {
		n += 1 + l + sovRedispb(uint64(l))
	}
	if len(m.ErrorResults) > 0 {
		for _, b := range m.ErrorResults {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	l = len(m.StatusResult)
	if l > 0 {
		n += 1 + l + sovRedispb(uint64(l))
	}
	if m.IntegerResult != 0 {
		n += 1 + sovRedispb(uint64(m.IntegerResult))
	}
	l = len(m.BulkResult)
	if l > 0 {
		n += 1 + l + sovRedispb(uint64(l))
	}
	if len(m.SliceArrayResult) > 0 {
		for _, b := range m.SliceArrayResult {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	if len(m.KVPairArrayResult) > 0 {
		for _, b := range m.KVPairArrayResult {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	if len(m.ScorePairArrayResult) > 0 {
		for _, b := range m.ScorePairArrayResult {
			l = len(b)
			n += 1 + l + sovRedispb(uint64(l))
		}
	}
	if m.Withscores {
		n += 2
	}
	return n
}

func sovRedispb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedispb(x uint64) (n int) {
	return sovRedispb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RedisArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedispb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedispb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedispb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedispb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedispb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RedisRespType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorResult = append(m.ErrorResult[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrorResult == nil {
				m.ErrorResult = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResults", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorResults = append(m.ErrorResults, make([]byte, postIndex-iNdEx))
			copy(m.ErrorResults[len(m.ErrorResults)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusResult = append(m.StatusResult[:0], dAtA[iNdEx:postIndex]...)
			if m.StatusResult == nil {
				m.StatusResult = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegerResult", wireType)
			}
			m.IntegerResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntegerResult |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulkResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BulkResult = append(m.BulkResult[:0], dAtA[iNdEx:postIndex]...)
			if m.BulkResult == nil {
				m.BulkResult = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceArrayResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceArrayResult = append(m.SliceArrayResult, make([]byte, postIndex-iNdEx))
			copy(m.SliceArrayResult[len(m.SliceArrayResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVPairArrayResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KVPairArrayResult = append(m.KVPairArrayResult, make([]byte, postIndex-iNdEx))
			copy(m.KVPairArrayResult[len(m.KVPairArrayResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScorePairArrayResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedispb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedispb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScorePairArrayResult = append(m.ScorePairArrayResult, make([]byte, postIndex-iNdEx))
			copy(m.ScorePairArrayResult[len(m.ScorePairArrayResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withscores", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Withscores = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRedispb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedispb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedispb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedispb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedispb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedispb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedispb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedispb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedispb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedispb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedispb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedispb = fmt.Errorf("proto: unexpected end of group")
)
