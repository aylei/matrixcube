// Code generated by protoc-gen-gogo.
// source: raftpb.proto
// DO NOT EDIT!

/*
	Package raftpb is a generated protocol buffer package.

	It is generated from these files:
		raftpb.proto

	It has these top-level messages:
		RaftMessage
		ShardLocalState
		RaftLocalState
		RaftTruncatedState
		RaftApplyState
		SnapshotMessageHeader
		SnapshotMessage
*/
package raftpb

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	metapb "github.com/deepfabric/beehive/pb/metapb"

	_ "github.com/gogo/protobuf/gogoproto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// PeerState the state of the shard peer
type PeerState int32

const (
	PeerNormal    PeerState = 0
	PeerApplying  PeerState = 1
	PeerTombstone PeerState = 2
)

var PeerState_name = map[int32]string{
	0: "PeerNormal",
	1: "PeerApplying",
	2: "PeerTombstone",
}
var PeerState_value = map[string]int32{
	"PeerNormal":    0,
	"PeerApplying":  1,
	"PeerTombstone": 2,
}

func (x PeerState) String() string {
	return proto.EnumName(PeerState_name, int32(x))
}
func (PeerState) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{0} }

// RaftMessage the message wrapped raft msg with shard info
type RaftMessage struct {
	ShardID     uint64            `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	From        metapb.Peer       `protobuf:"bytes,2,opt,name=from" json:"from"`
	To          metapb.Peer       `protobuf:"bytes,3,opt,name=to" json:"to"`
	Message     []byte            `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	ShardEpoch  metapb.ShardEpoch `protobuf:"bytes,5,opt,name=shardEpoch" json:"shardEpoch"`
	IsTombstone bool              `protobuf:"varint,6,opt,name=isTombstone,proto3" json:"isTombstone,omitempty"`
	Start       []byte            `protobuf:"bytes,7,opt,name=start,proto3" json:"start,omitempty"`
	End         []byte            `protobuf:"bytes,8,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *RaftMessage) Reset()                    { *m = RaftMessage{} }
func (m *RaftMessage) String() string            { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()               {}
func (*RaftMessage) Descriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{0} }

func (m *RaftMessage) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *RaftMessage) GetFrom() metapb.Peer {
	if m != nil {
		return m.From
	}
	return metapb.Peer{}
}

func (m *RaftMessage) GetTo() metapb.Peer {
	if m != nil {
		return m.To
	}
	return metapb.Peer{}
}

func (m *RaftMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RaftMessage) GetShardEpoch() metapb.ShardEpoch {
	if m != nil {
		return m.ShardEpoch
	}
	return metapb.ShardEpoch{}
}

func (m *RaftMessage) GetIsTombstone() bool {
	if m != nil {
		return m.IsTombstone
	}
	return false
}

func (m *RaftMessage) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *RaftMessage) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

// ShardLocalState the shard state on the store
type ShardLocalState struct {
	State PeerState    `protobuf:"varint,1,opt,name=state,proto3,enum=raftpb.PeerState" json:"state,omitempty"`
	Shard metapb.Shard `protobuf:"bytes,2,opt,name=shard" json:"shard"`
}

func (m *ShardLocalState) Reset()                    { *m = ShardLocalState{} }
func (m *ShardLocalState) String() string            { return proto.CompactTextString(m) }
func (*ShardLocalState) ProtoMessage()               {}
func (*ShardLocalState) Descriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{1} }

func (m *ShardLocalState) GetState() PeerState {
	if m != nil {
		return m.State
	}
	return PeerNormal
}

func (m *ShardLocalState) GetShard() metapb.Shard {
	if m != nil {
		return m.Shard
	}
	return metapb.Shard{}
}

// RaftLocalState raft local state about raft log
type RaftLocalState struct {
	HardState []byte `protobuf:"bytes,1,opt,name=hardState,proto3" json:"hardState,omitempty"`
	LastIndex uint64 `protobuf:"varint,2,opt,name=lastIndex,proto3" json:"lastIndex,omitempty"`
}

func (m *RaftLocalState) Reset()                    { *m = RaftLocalState{} }
func (m *RaftLocalState) String() string            { return proto.CompactTextString(m) }
func (*RaftLocalState) ProtoMessage()               {}
func (*RaftLocalState) Descriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{2} }

func (m *RaftLocalState) GetHardState() []byte {
	if m != nil {
		return m.HardState
	}
	return nil
}

func (m *RaftLocalState) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

// RaftTruncatedState raft log truncated state
type RaftTruncatedState struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term  uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (m *RaftTruncatedState) Reset()                    { *m = RaftTruncatedState{} }
func (m *RaftTruncatedState) String() string            { return proto.CompactTextString(m) }
func (*RaftTruncatedState) ProtoMessage()               {}
func (*RaftTruncatedState) Descriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{3} }

func (m *RaftTruncatedState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftTruncatedState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// RaftApplyState raft log applied state
type RaftApplyState struct {
	AppliedIndex   uint64             `protobuf:"varint,1,opt,name=appliedIndex,proto3" json:"appliedIndex,omitempty"`
	TruncatedState RaftTruncatedState `protobuf:"bytes,2,opt,name=truncatedState" json:"truncatedState"`
}

func (m *RaftApplyState) Reset()                    { *m = RaftApplyState{} }
func (m *RaftApplyState) String() string            { return proto.CompactTextString(m) }
func (*RaftApplyState) ProtoMessage()               {}
func (*RaftApplyState) Descriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{4} }

func (m *RaftApplyState) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *RaftApplyState) GetTruncatedState() RaftTruncatedState {
	if m != nil {
		return m.TruncatedState
	}
	return RaftTruncatedState{}
}

// SnapshotMessageHeader snapshot message header
type SnapshotMessageHeader struct {
	Shard metapb.Shard `protobuf:"bytes,1,opt,name=shard" json:"shard"`
	From  metapb.Peer  `protobuf:"bytes,2,opt,name=from" json:"from"`
	To    metapb.Peer  `protobuf:"bytes,3,opt,name=to" json:"to"`
	Term  uint64       `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index uint64       `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *SnapshotMessageHeader) Reset()                    { *m = SnapshotMessageHeader{} }
func (m *SnapshotMessageHeader) String() string            { return proto.CompactTextString(m) }
func (*SnapshotMessageHeader) ProtoMessage()               {}
func (*SnapshotMessageHeader) Descriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{5} }

func (m *SnapshotMessageHeader) GetShard() metapb.Shard {
	if m != nil {
		return m.Shard
	}
	return metapb.Shard{}
}

func (m *SnapshotMessageHeader) GetFrom() metapb.Peer {
	if m != nil {
		return m.From
	}
	return metapb.Peer{}
}

func (m *SnapshotMessageHeader) GetTo() metapb.Peer {
	if m != nil {
		return m.To
	}
	return metapb.Peer{}
}

func (m *SnapshotMessageHeader) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *SnapshotMessageHeader) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// SnapshotMessage snapshot message
type SnapshotMessage struct {
	Header   SnapshotMessageHeader `protobuf:"bytes,1,opt,name=header" json:"header"`
	Data     []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	First    bool                  `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
	Last     bool                  `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`
	FileSize uint64                `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	CheckSum uint64                `protobuf:"varint,6,opt,name=checkSum,proto3" json:"checkSum,omitempty"`
}

func (m *SnapshotMessage) Reset()                    { *m = SnapshotMessage{} }
func (m *SnapshotMessage) String() string            { return proto.CompactTextString(m) }
func (*SnapshotMessage) ProtoMessage()               {}
func (*SnapshotMessage) Descriptor() ([]byte, []int) { return fileDescriptorRaftpb, []int{6} }

func (m *SnapshotMessage) GetHeader() SnapshotMessageHeader {
	if m != nil {
		return m.Header
	}
	return SnapshotMessageHeader{}
}

func (m *SnapshotMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SnapshotMessage) GetFirst() bool {
	if m != nil {
		return m.First
	}
	return false
}

func (m *SnapshotMessage) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *SnapshotMessage) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *SnapshotMessage) GetCheckSum() uint64 {
	if m != nil {
		return m.CheckSum
	}
	return 0
}

func init() {
	proto.RegisterType((*RaftMessage)(nil), "raftpb.RaftMessage")
	proto.RegisterType((*ShardLocalState)(nil), "raftpb.ShardLocalState")
	proto.RegisterType((*RaftLocalState)(nil), "raftpb.RaftLocalState")
	proto.RegisterType((*RaftTruncatedState)(nil), "raftpb.RaftTruncatedState")
	proto.RegisterType((*RaftApplyState)(nil), "raftpb.RaftApplyState")
	proto.RegisterType((*SnapshotMessageHeader)(nil), "raftpb.SnapshotMessageHeader")
	proto.RegisterType((*SnapshotMessage)(nil), "raftpb.SnapshotMessage")
	proto.RegisterEnum("raftpb.PeerState", PeerState_name, PeerState_value)
}
func (m *RaftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.ShardID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.From.Size()))
	n1, err := m.From.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.To.Size()))
	n2, err := m.To.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Message) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.ShardEpoch.Size()))
	n3, err := m.ShardEpoch.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.IsTombstone {
		dAtA[i] = 0x30
		i++
		if m.IsTombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Start) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func (m *ShardLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardLocalState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.State))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.Shard.Size()))
	n4, err := m.Shard.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *RaftLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLocalState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HardState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.HardState)))
		i += copy(dAtA[i:], m.HardState)
	}
	if m.LastIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.LastIndex))
	}
	return i, nil
}

func (m *RaftTruncatedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftTruncatedState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Index))
	}
	if m.Term != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Term))
	}
	return i, nil
}

func (m *RaftApplyState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftApplyState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.AppliedIndex))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.TruncatedState.Size()))
	n5, err := m.TruncatedState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *SnapshotMessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMessageHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.Shard.Size()))
	n6, err := m.Shard.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.From.Size()))
	n7, err := m.From.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.To.Size()))
	n8, err := m.To.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.Term != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *SnapshotMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRaftpb(dAtA, i, uint64(m.Header.Size()))
	n9, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.First {
		dAtA[i] = 0x18
		i++
		if m.First {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Last {
		dAtA[i] = 0x20
		i++
		if m.Last {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.FileSize))
	}
	if m.CheckSum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRaftpb(dAtA, i, uint64(m.CheckSum))
	}
	return i, nil
}

func encodeFixed64Raftpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Raftpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaftpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RaftMessage) Size() (n int) {
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovRaftpb(uint64(m.ShardID))
	}
	l = m.From.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	l = m.ShardEpoch.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	if m.IsTombstone {
		n += 2
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	return n
}

func (m *ShardLocalState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovRaftpb(uint64(m.State))
	}
	l = m.Shard.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	return n
}

func (m *RaftLocalState) Size() (n int) {
	var l int
	_ = l
	l = len(m.HardState)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	if m.LastIndex != 0 {
		n += 1 + sovRaftpb(uint64(m.LastIndex))
	}
	return n
}

func (m *RaftTruncatedState) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRaftpb(uint64(m.Index))
	}
	if m.Term != 0 {
		n += 1 + sovRaftpb(uint64(m.Term))
	}
	return n
}

func (m *RaftApplyState) Size() (n int) {
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		n += 1 + sovRaftpb(uint64(m.AppliedIndex))
	}
	l = m.TruncatedState.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	return n
}

func (m *SnapshotMessageHeader) Size() (n int) {
	var l int
	_ = l
	l = m.Shard.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = m.From.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	if m.Term != 0 {
		n += 1 + sovRaftpb(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovRaftpb(uint64(m.Index))
	}
	return n
}

func (m *SnapshotMessage) Size() (n int) {
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	if m.First {
		n += 2
	}
	if m.Last {
		n += 2
	}
	if m.FileSize != 0 {
		n += 1 + sovRaftpb(uint64(m.FileSize))
	}
	if m.CheckSum != 0 {
		n += 1 + sovRaftpb(uint64(m.CheckSum))
	}
	return n
}

func sovRaftpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaftpb(x uint64) (n int) {
	return sovRaftpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShardEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTombstone = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (PeerState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardState = append(m.HardState[:0], dAtA[iNdEx:postIndex]...)
			if m.HardState == nil {
				m.HardState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftTruncatedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftTruncatedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftTruncatedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftApplyState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftApplyState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftApplyState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TruncatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.First = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Last = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSum", wireType)
			}
			m.CheckSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckSum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaftpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaftpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaftpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaftpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raftpb.proto", fileDescriptorRaftpb) }

var fileDescriptorRaftpb = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x53, 0x27, 0x4d, 0x6f, 0xdd, 0x34, 0x1d, 0xf5, 0x93, 0xac, 0xe8, 0x23, 0x44, 0x5e,
	0x40, 0x40, 0x22, 0x91, 0x0a, 0x0b, 0x24, 0x24, 0x04, 0x15, 0x48, 0xad, 0x54, 0x10, 0x72, 0xfa,
	0x02, 0x63, 0xfb, 0x3a, 0xb6, 0x88, 0x33, 0x96, 0x3d, 0x41, 0xc0, 0x82, 0x67, 0x80, 0xb7, 0xe1,
	0x01, 0x58, 0x74, 0xd9, 0x27, 0x40, 0x50, 0x5e, 0x04, 0xcd, 0x9d, 0xb1, 0x93, 0x14, 0x10, 0x1b,
	0x56, 0x99, 0x73, 0xff, 0xce, 0x99, 0xe3, 0x3b, 0x01, 0xa7, 0xe0, 0xb1, 0xcc, 0x83, 0x71, 0x5e,
	0x08, 0x29, 0x58, 0x5b, 0xa3, 0xfe, 0x83, 0x59, 0x2a, 0x93, 0x65, 0x30, 0x0e, 0x45, 0x36, 0x89,
	0x10, 0xf3, 0x98, 0x07, 0x45, 0x1a, 0x4e, 0x02, 0xc4, 0x24, 0x7d, 0x83, 0x93, 0x3c, 0x98, 0x64,
	0x28, 0x79, 0xfd, 0xa3, 0xbb, 0xfb, 0xf7, 0xd6, 0xba, 0x66, 0x62, 0x26, 0x26, 0x14, 0x0e, 0x96,
	0x31, 0x21, 0x02, 0x74, 0xd2, 0xe5, 0xde, 0xa7, 0x26, 0xec, 0xfa, 0x3c, 0x96, 0x2f, 0xb0, 0x2c,
	0xf9, 0x0c, 0x99, 0x0b, 0xdb, 0x65, 0xc2, 0x8b, 0xe8, 0xf4, 0x99, 0x6b, 0x0d, 0xad, 0x91, 0xed,
	0x57, 0x90, 0xdd, 0x02, 0x3b, 0x2e, 0x44, 0xe6, 0x36, 0x87, 0xd6, 0x68, 0xf7, 0xc8, 0x19, 0x1b,
	0xd6, 0x57, 0x88, 0xc5, 0xb1, 0x7d, 0xf1, 0xf5, 0x66, 0xc3, 0xa7, 0x3c, 0xf3, 0xa0, 0x29, 0x85,
	0xbb, 0xf5, 0xc7, 0xaa, 0xa6, 0x14, 0x8a, 0x25, 0xd3, 0x84, 0xae, 0x3d, 0xb4, 0x46, 0x8e, 0x5f,
	0x41, 0xf6, 0x10, 0x80, 0x08, 0x9f, 0xe7, 0x22, 0x4c, 0xdc, 0x16, 0x4d, 0x61, 0xd5, 0x94, 0x69,
	0x9d, 0x31, 0xb3, 0xd6, 0x6a, 0xd9, 0x10, 0x76, 0xd3, 0xf2, 0x5c, 0x64, 0x41, 0x29, 0xc5, 0x02,
	0xdd, 0xf6, 0xd0, 0x1a, 0x75, 0xfc, 0xf5, 0x10, 0x3b, 0x84, 0x56, 0x29, 0x79, 0x21, 0xdd, 0x6d,
	0xe2, 0xd4, 0x80, 0xf5, 0x60, 0x0b, 0x17, 0x91, 0xdb, 0xa1, 0x98, 0x3a, 0x7a, 0x08, 0xfb, 0xc4,
	0x74, 0x26, 0x42, 0x3e, 0x9f, 0x4a, 0x2e, 0x91, 0xdd, 0xa6, 0x56, 0x89, 0x64, 0x4a, 0xf7, 0xe8,
	0x60, 0x6c, 0xbe, 0x98, 0xba, 0x17, 0x55, 0xf8, 0x3a, 0xcf, 0xee, 0x40, 0x8b, 0x34, 0x19, 0x9b,
	0xf6, 0x36, 0xa4, 0x1b, 0xd5, 0xba, 0xc2, 0x3b, 0x83, 0xae, 0x72, 0x7e, 0x8d, 0xe5, 0x7f, 0xd8,
	0x51, 0x99, 0x69, 0xcd, 0xe4, 0xf8, 0xab, 0x80, 0xca, 0xce, 0x79, 0x29, 0x4f, 0x17, 0x11, 0xbe,
	0xa5, 0xf1, 0xb6, 0xbf, 0x0a, 0x78, 0x8f, 0x81, 0xa9, 0x69, 0xe7, 0xc5, 0x72, 0x11, 0x72, 0x89,
	0xa6, 0xe7, 0x10, 0x5a, 0x29, 0xd5, 0xeb, 0x8f, 0xa9, 0x01, 0x63, 0x60, 0x4b, 0x2c, 0x32, 0x33,
	0x84, 0xce, 0xde, 0x07, 0xad, 0xe6, 0x69, 0x9e, 0xcf, 0xdf, 0xe9, 0x5e, 0x0f, 0x1c, 0x9e, 0xe7,
	0xf3, 0x14, 0xa3, 0xd3, 0xb5, 0x11, 0x1b, 0x31, 0x76, 0x02, 0x5d, 0xb9, 0xc1, 0x68, 0xee, 0xdd,
	0xaf, 0x0c, 0xfa, 0x55, 0x93, 0x31, 0xe1, 0x5a, 0x9f, 0xf7, 0xd9, 0x82, 0xff, 0xa6, 0x0b, 0x9e,
	0x97, 0x89, 0xa8, 0x96, 0xf1, 0x04, 0x79, 0x84, 0xc5, 0xca, 0x52, 0xeb, 0x6f, 0x96, 0xfe, 0xd3,
	0x1d, 0xad, 0x4c, 0xb2, 0x57, 0x26, 0xad, 0xec, 0x6c, 0xad, 0xd9, 0xe9, 0x7d, 0xb1, 0x60, 0xff,
	0x9a, 0x74, 0xf6, 0x08, 0xda, 0x09, 0xc9, 0x37, 0xaa, 0x6f, 0x54, 0x86, 0xfc, 0xf6, 0x8e, 0x86,
	0xd6, 0xb4, 0x28, 0xea, 0x88, 0x4b, 0x4e, 0xd7, 0x70, 0x7c, 0x3a, 0x2b, 0xea, 0x38, 0x2d, 0x4a,
	0x49, 0xaa, 0x3b, 0xbe, 0x06, 0xaa, 0x52, 0xad, 0x00, 0x89, 0xec, 0xf8, 0x74, 0x66, 0x7d, 0xe8,
	0xc4, 0xe9, 0x1c, 0xa7, 0xe9, 0x7b, 0x34, 0x3a, 0x6b, 0xac, 0x72, 0x61, 0x82, 0xe1, 0xeb, 0xe9,
	0x32, 0xa3, 0x17, 0x62, 0xfb, 0x35, 0xbe, 0xfb, 0x04, 0x76, 0xea, 0x75, 0x66, 0x5d, 0x00, 0x05,
	0x5e, 0x8a, 0x22, 0xe3, 0xf3, 0x5e, 0x83, 0xf5, 0xc0, 0x51, 0x98, 0xd6, 0x23, 0x5d, 0xcc, 0x7a,
	0x16, 0x3b, 0x80, 0x3d, 0x15, 0xa9, 0x9f, 0x57, 0xaf, 0x79, 0x7c, 0x78, 0xf9, 0x7d, 0xd0, 0xb8,
	0xb8, 0x1a, 0x58, 0x97, 0x57, 0x03, 0xeb, 0xdb, 0xd5, 0xc0, 0xfa, 0xf8, 0x63, 0xd0, 0x08, 0xda,
	0xf4, 0x4f, 0x73, 0xff, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x7d, 0x36, 0x2c, 0xe6, 0x04,
	0x00, 0x00,
}
