// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raftpb.proto

package raftpb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	metapb "github.com/deepfabric/beehive/pb/metapb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PeerState the state of the shard peer
type PeerState int32

const (
	PeerNormal    PeerState = 0
	PeerApplying  PeerState = 1
	PeerTombstone PeerState = 2
)

var PeerState_name = map[int32]string{
	0: "PeerNormal",
	1: "PeerApplying",
	2: "PeerTombstone",
}

var PeerState_value = map[string]int32{
	"PeerNormal":    0,
	"PeerApplying":  1,
	"PeerTombstone": 2,
}

func (x PeerState) String() string {
	return proto.EnumName(PeerState_name, int32(x))
}

func (PeerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{0}
}

// RaftMessage the message wrapped raft msg with shard info
type RaftMessage struct {
	ShardID      uint64            `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Group        uint64            `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	From         metapb.Peer       `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	To           metapb.Peer       `protobuf:"bytes,4,opt,name=to,proto3" json:"to"`
	Message      []byte            `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	ShardEpoch   metapb.ShardEpoch `protobuf:"bytes,6,opt,name=shardEpoch,proto3" json:"shardEpoch"`
	IsTombstone  bool              `protobuf:"varint,7,opt,name=isTombstone,proto3" json:"isTombstone,omitempty"`
	Start        []byte            `protobuf:"bytes,8,opt,name=start,proto3" json:"start,omitempty"`
	End          []byte            `protobuf:"bytes,9,opt,name=end,proto3" json:"end,omitempty"`
	DisableSplit bool              `protobuf:"varint,10,opt,name=disableSplit,proto3" json:"disableSplit,omitempty"`
}

func (m *RaftMessage) Reset()         { *m = RaftMessage{} }
func (m *RaftMessage) String() string { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()    {}
func (*RaftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{0}
}
func (m *RaftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessage.Merge(m, src)
}
func (m *RaftMessage) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessage proto.InternalMessageInfo

func (m *RaftMessage) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *RaftMessage) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *RaftMessage) GetFrom() metapb.Peer {
	if m != nil {
		return m.From
	}
	return metapb.Peer{}
}

func (m *RaftMessage) GetTo() metapb.Peer {
	if m != nil {
		return m.To
	}
	return metapb.Peer{}
}

func (m *RaftMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RaftMessage) GetShardEpoch() metapb.ShardEpoch {
	if m != nil {
		return m.ShardEpoch
	}
	return metapb.ShardEpoch{}
}

func (m *RaftMessage) GetIsTombstone() bool {
	if m != nil {
		return m.IsTombstone
	}
	return false
}

func (m *RaftMessage) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *RaftMessage) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *RaftMessage) GetDisableSplit() bool {
	if m != nil {
		return m.DisableSplit
	}
	return false
}

// ShardLocalState the shard state on the store
type ShardLocalState struct {
	State PeerState    `protobuf:"varint,1,opt,name=state,proto3,enum=raftpb.PeerState" json:"state,omitempty"`
	Shard metapb.Shard `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard"`
}

func (m *ShardLocalState) Reset()         { *m = ShardLocalState{} }
func (m *ShardLocalState) String() string { return proto.CompactTextString(m) }
func (*ShardLocalState) ProtoMessage()    {}
func (*ShardLocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{1}
}
func (m *ShardLocalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardLocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardLocalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardLocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardLocalState.Merge(m, src)
}
func (m *ShardLocalState) XXX_Size() int {
	return m.Size()
}
func (m *ShardLocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardLocalState.DiscardUnknown(m)
}

var xxx_messageInfo_ShardLocalState proto.InternalMessageInfo

func (m *ShardLocalState) GetState() PeerState {
	if m != nil {
		return m.State
	}
	return PeerNormal
}

func (m *ShardLocalState) GetShard() metapb.Shard {
	if m != nil {
		return m.Shard
	}
	return metapb.Shard{}
}

// RaftLocalState raft local state about raft log
type RaftLocalState struct {
	HardState []byte `protobuf:"bytes,1,opt,name=hardState,proto3" json:"hardState,omitempty"`
	LastIndex uint64 `protobuf:"varint,2,opt,name=lastIndex,proto3" json:"lastIndex,omitempty"`
}

func (m *RaftLocalState) Reset()         { *m = RaftLocalState{} }
func (m *RaftLocalState) String() string { return proto.CompactTextString(m) }
func (*RaftLocalState) ProtoMessage()    {}
func (*RaftLocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{2}
}
func (m *RaftLocalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLocalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftLocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLocalState.Merge(m, src)
}
func (m *RaftLocalState) XXX_Size() int {
	return m.Size()
}
func (m *RaftLocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLocalState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLocalState proto.InternalMessageInfo

func (m *RaftLocalState) GetHardState() []byte {
	if m != nil {
		return m.HardState
	}
	return nil
}

func (m *RaftLocalState) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

// RaftTruncatedState raft log truncated state
type RaftTruncatedState struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term  uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (m *RaftTruncatedState) Reset()         { *m = RaftTruncatedState{} }
func (m *RaftTruncatedState) String() string { return proto.CompactTextString(m) }
func (*RaftTruncatedState) ProtoMessage()    {}
func (*RaftTruncatedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{3}
}
func (m *RaftTruncatedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftTruncatedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftTruncatedState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftTruncatedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftTruncatedState.Merge(m, src)
}
func (m *RaftTruncatedState) XXX_Size() int {
	return m.Size()
}
func (m *RaftTruncatedState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftTruncatedState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftTruncatedState proto.InternalMessageInfo

func (m *RaftTruncatedState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftTruncatedState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// RaftApplyState raft log applied state
type RaftApplyState struct {
	AppliedIndex   uint64             `protobuf:"varint,1,opt,name=appliedIndex,proto3" json:"appliedIndex,omitempty"`
	TruncatedState RaftTruncatedState `protobuf:"bytes,2,opt,name=truncatedState,proto3" json:"truncatedState"`
}

func (m *RaftApplyState) Reset()         { *m = RaftApplyState{} }
func (m *RaftApplyState) String() string { return proto.CompactTextString(m) }
func (*RaftApplyState) ProtoMessage()    {}
func (*RaftApplyState) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{4}
}
func (m *RaftApplyState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftApplyState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftApplyState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftApplyState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftApplyState.Merge(m, src)
}
func (m *RaftApplyState) XXX_Size() int {
	return m.Size()
}
func (m *RaftApplyState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftApplyState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftApplyState proto.InternalMessageInfo

func (m *RaftApplyState) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *RaftApplyState) GetTruncatedState() RaftTruncatedState {
	if m != nil {
		return m.TruncatedState
	}
	return RaftTruncatedState{}
}

// SnapshotMessageHeader snapshot message header
type SnapshotMessageHeader struct {
	Shard metapb.Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard"`
	From  metapb.Peer  `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	To    metapb.Peer  `protobuf:"bytes,3,opt,name=to,proto3" json:"to"`
	Term  uint64       `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index uint64       `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *SnapshotMessageHeader) Reset()         { *m = SnapshotMessageHeader{} }
func (m *SnapshotMessageHeader) String() string { return proto.CompactTextString(m) }
func (*SnapshotMessageHeader) ProtoMessage()    {}
func (*SnapshotMessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{5}
}
func (m *SnapshotMessageHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotMessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotMessageHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotMessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMessageHeader.Merge(m, src)
}
func (m *SnapshotMessageHeader) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotMessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMessageHeader proto.InternalMessageInfo

func (m *SnapshotMessageHeader) GetShard() metapb.Shard {
	if m != nil {
		return m.Shard
	}
	return metapb.Shard{}
}

func (m *SnapshotMessageHeader) GetFrom() metapb.Peer {
	if m != nil {
		return m.From
	}
	return metapb.Peer{}
}

func (m *SnapshotMessageHeader) GetTo() metapb.Peer {
	if m != nil {
		return m.To
	}
	return metapb.Peer{}
}

func (m *SnapshotMessageHeader) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *SnapshotMessageHeader) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// SnapshotMessage snapshot message
type SnapshotMessage struct {
	Header   SnapshotMessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	Data     []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	First    bool                  `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
	Last     bool                  `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`
	FileSize uint64                `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	CheckSum uint64                `protobuf:"varint,6,opt,name=checkSum,proto3" json:"checkSum,omitempty"`
}

func (m *SnapshotMessage) Reset()         { *m = SnapshotMessage{} }
func (m *SnapshotMessage) String() string { return proto.CompactTextString(m) }
func (*SnapshotMessage) ProtoMessage()    {}
func (*SnapshotMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fe96ca52b46d23, []int{6}
}
func (m *SnapshotMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMessage.Merge(m, src)
}
func (m *SnapshotMessage) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMessage proto.InternalMessageInfo

func (m *SnapshotMessage) GetHeader() SnapshotMessageHeader {
	if m != nil {
		return m.Header
	}
	return SnapshotMessageHeader{}
}

func (m *SnapshotMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SnapshotMessage) GetFirst() bool {
	if m != nil {
		return m.First
	}
	return false
}

func (m *SnapshotMessage) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *SnapshotMessage) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *SnapshotMessage) GetCheckSum() uint64 {
	if m != nil {
		return m.CheckSum
	}
	return 0
}

func init() {
	proto.RegisterEnum("raftpb.PeerState", PeerState_name, PeerState_value)
	proto.RegisterType((*RaftMessage)(nil), "raftpb.RaftMessage")
	proto.RegisterType((*ShardLocalState)(nil), "raftpb.ShardLocalState")
	proto.RegisterType((*RaftLocalState)(nil), "raftpb.RaftLocalState")
	proto.RegisterType((*RaftTruncatedState)(nil), "raftpb.RaftTruncatedState")
	proto.RegisterType((*RaftApplyState)(nil), "raftpb.RaftApplyState")
	proto.RegisterType((*SnapshotMessageHeader)(nil), "raftpb.SnapshotMessageHeader")
	proto.RegisterType((*SnapshotMessage)(nil), "raftpb.SnapshotMessage")
}

func init() { proto.RegisterFile("raftpb.proto", fileDescriptor_92fe96ca52b46d23) }

var fileDescriptor_92fe96ca52b46d23 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x8e, 0x53, 0x27, 0x4d, 0x4f, 0xdc, 0x34, 0x1d, 0xf5, 0x4a, 0x56, 0xd4, 0xeb, 0x1b, 0x79,
	0x71, 0x6f, 0x2e, 0x12, 0x89, 0x54, 0x58, 0x20, 0x21, 0x21, 0xa8, 0x40, 0x6a, 0xa5, 0x82, 0x90,
	0xdd, 0x17, 0x18, 0xdb, 0xe3, 0xd8, 0xc2, 0xce, 0x58, 0xf6, 0x04, 0x01, 0x0b, 0x9e, 0x81, 0xc7,
	0xe1, 0x01, 0x58, 0x54, 0x62, 0xd3, 0x25, 0x2b, 0x04, 0xed, 0x8b, 0xa0, 0x39, 0x33, 0x76, 0x92,
	0xf2, 0xbb, 0xca, 0xf9, 0xce, 0xef, 0x77, 0xbe, 0x39, 0x0e, 0x58, 0x25, 0x8d, 0x45, 0x11, 0x4c,
	0x8b, 0x92, 0x0b, 0x4e, 0xba, 0x0a, 0x8d, 0xee, 0xce, 0x53, 0x91, 0x2c, 0x83, 0x69, 0xc8, 0xf3,
	0x59, 0xc4, 0x58, 0x11, 0xd3, 0xa0, 0x4c, 0xc3, 0x59, 0xc0, 0x58, 0x92, 0xbe, 0x64, 0xb3, 0x22,
	0x98, 0xe5, 0x4c, 0xd0, 0xe6, 0x47, 0x55, 0x8f, 0x6e, 0xaf, 0x55, 0xcd, 0xf9, 0x9c, 0xcf, 0xd0,
	0x1d, 0x2c, 0x63, 0x44, 0x08, 0xd0, 0x52, 0xe9, 0xee, 0xc7, 0x36, 0xf4, 0x3d, 0x1a, 0x8b, 0xa7,
	0xac, 0xaa, 0xe8, 0x9c, 0x11, 0x1b, 0xb6, 0xab, 0x84, 0x96, 0xd1, 0xe9, 0x63, 0xdb, 0x18, 0x1b,
	0x13, 0xd3, 0xab, 0x21, 0x39, 0x80, 0xce, 0xbc, 0xe4, 0xcb, 0xc2, 0x6e, 0xa3, 0x5f, 0x01, 0xf2,
	0x2f, 0x98, 0x71, 0xc9, 0x73, 0x7b, 0x6b, 0x6c, 0x4c, 0xfa, 0x47, 0xd6, 0x54, 0x73, 0x79, 0xce,
	0x58, 0x79, 0x6c, 0x5e, 0x7c, 0xfe, 0xa7, 0xe5, 0x61, 0x9c, 0xb8, 0xd0, 0x16, 0xdc, 0x36, 0x7f,
	0x9a, 0xd5, 0x16, 0x5c, 0xce, 0xce, 0x15, 0x0d, 0xbb, 0x33, 0x36, 0x26, 0x96, 0x57, 0x43, 0x72,
	0x0f, 0x00, 0x69, 0x3c, 0x29, 0x78, 0x98, 0xd8, 0x5d, 0xec, 0x42, 0xea, 0x2e, 0x7e, 0x13, 0xd1,
	0xbd, 0xd6, 0x72, 0xc9, 0x18, 0xfa, 0x69, 0x75, 0xce, 0xf3, 0xa0, 0x12, 0x7c, 0xc1, 0xec, 0xed,
	0xb1, 0x31, 0xe9, 0x79, 0xeb, 0x2e, 0xb9, 0x57, 0x25, 0x68, 0x29, 0xec, 0x1e, 0xce, 0x54, 0x80,
	0x0c, 0x61, 0x8b, 0x2d, 0x22, 0x7b, 0x07, 0x7d, 0xd2, 0x24, 0x2e, 0x58, 0x51, 0x5a, 0xd1, 0x20,
	0x63, 0x7e, 0x91, 0xa5, 0xc2, 0x06, 0x6c, 0xb5, 0xe1, 0x73, 0x19, 0xec, 0x21, 0x9b, 0x33, 0x1e,
	0xd2, 0xcc, 0x17, 0x54, 0x30, 0xf2, 0x1f, 0xb6, 0x17, 0x0c, 0xe5, 0x1c, 0x1c, 0xed, 0x4f, 0xf5,
	0x5b, 0xcb, 0xdd, 0x31, 0xc3, 0x53, 0x71, 0xf2, 0x3f, 0x74, 0x90, 0x37, 0xea, 0xdb, 0x3f, 0xda,
	0xdd, 0x58, 0x4f, 0x6f, 0xa6, 0x32, 0xdc, 0x33, 0x18, 0xc8, 0x37, 0x5b, 0x9b, 0x72, 0x08, 0x3b,
	0x32, 0xe2, 0x37, 0x93, 0x2c, 0x6f, 0xe5, 0x90, 0xd1, 0x8c, 0x56, 0xe2, 0x74, 0x11, 0xb1, 0x57,
	0xfa, 0xf9, 0x56, 0x0e, 0xf7, 0x01, 0x10, 0xd9, 0xed, 0xbc, 0x5c, 0x2e, 0x42, 0x2a, 0x98, 0xae,
	0x39, 0x80, 0x4e, 0x8a, 0xf9, 0xea, 0x0c, 0x14, 0x20, 0x04, 0x4c, 0xc1, 0xca, 0x5c, 0x37, 0x41,
	0xdb, 0x7d, 0xab, 0xd8, 0x3c, 0x2a, 0x8a, 0xec, 0xb5, 0xaa, 0x75, 0xc1, 0xa2, 0x45, 0x91, 0xa5,
	0x2c, 0x3a, 0x5d, 0x6b, 0xb1, 0xe1, 0x23, 0x27, 0x30, 0x10, 0x1b, 0x13, 0xf5, 0xde, 0xa3, 0x5a,
	0xa0, 0xef, 0x39, 0x69, 0x11, 0x6e, 0xd4, 0xb9, 0xef, 0x0d, 0xf8, 0xcb, 0x5f, 0xd0, 0xa2, 0x4a,
	0x78, 0x7d, 0xc6, 0x27, 0x8c, 0x46, 0xac, 0x5c, 0x49, 0x6a, 0xfc, 0x4e, 0xd2, 0xe6, 0x8e, 0xdb,
	0x7f, 0x74, 0xc7, 0x5b, 0xbf, 0xbc, 0xe3, 0x5a, 0x24, 0x73, 0x25, 0xd2, 0x4a, 0xce, 0xce, 0x9a,
	0x9c, 0xee, 0x07, 0x03, 0xf6, 0x6e, 0x50, 0x27, 0xf7, 0xa1, 0x9b, 0x20, 0x7d, 0xcd, 0xfa, 0xef,
	0x5a, 0x90, 0x1f, 0xee, 0xa8, 0xc7, 0xea, 0x12, 0x39, 0x3a, 0xa2, 0x82, 0xe2, 0x1a, 0x96, 0x87,
	0xb6, 0x1c, 0x1d, 0xa7, 0x65, 0x25, 0x90, 0x75, 0xcf, 0x53, 0x40, 0x66, 0xca, 0x13, 0x40, 0x92,
	0x3d, 0x0f, 0x6d, 0x32, 0x82, 0x5e, 0x9c, 0x66, 0xcc, 0x4f, 0xdf, 0x30, 0xcd, 0xb3, 0xc1, 0x32,
	0x16, 0x26, 0x2c, 0x7c, 0xe1, 0x2f, 0x73, 0xfc, 0x00, 0x4d, 0xaf, 0xc1, 0xb7, 0x1e, 0xc2, 0x4e,
	0x73, 0xce, 0x64, 0x00, 0x20, 0xc1, 0x33, 0x5e, 0xe6, 0x34, 0x1b, 0xb6, 0xc8, 0x10, 0x2c, 0x89,
	0xf1, 0x3c, 0xd2, 0xc5, 0x7c, 0x68, 0x90, 0x7d, 0xd8, 0x95, 0x9e, 0xe6, 0x13, 0x1c, 0xb6, 0x8f,
	0x0f, 0x2f, 0xbf, 0x3a, 0xad, 0x8b, 0x2b, 0xc7, 0xb8, 0xbc, 0x72, 0x8c, 0x2f, 0x57, 0x8e, 0xf1,
	0xee, 0xda, 0x69, 0x5d, 0x5e, 0x3b, 0xad, 0x4f, 0xd7, 0x4e, 0x2b, 0xe8, 0xe2, 0x7f, 0xd5, 0x9d,
	0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xab, 0x19, 0xcf, 0xdd, 0x28, 0x05, 0x00, 0x00,
}

func (m *RaftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisableSplit {
		i--
		if m.DisableSplit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsTombstone {
		i--
		if m.IsTombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.ShardEpoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Group != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardLocalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardLocalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shard.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.State != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLocalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLocalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastIndex != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.LastIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HardState) > 0 {
		i -= len(m.HardState)
		copy(dAtA[i:], m.HardState)
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.HardState)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RaftTruncatedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftTruncatedState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftTruncatedState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftApplyState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftApplyState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftApplyState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TruncatedState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AppliedIndex != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotMessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMessageHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotMessageHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if m.Term != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Shard.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SnapshotMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckSum != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.CheckSum))
		i--
		dAtA[i] = 0x30
	}
	if m.FileSize != 0 {
		i = encodeVarintRaftpb(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x28
	}
	if m.Last {
		i--
		if m.Last {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.First {
		i--
		if m.First {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRaftpb(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRaftpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRaftpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovRaftpb(uint64(m.ShardID))
	}
	if m.Group != 0 {
		n += 1 + sovRaftpb(uint64(m.Group))
	}
	l = m.From.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	l = m.ShardEpoch.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	if m.IsTombstone {
		n += 2
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	if m.DisableSplit {
		n += 2
	}
	return n
}

func (m *ShardLocalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovRaftpb(uint64(m.State))
	}
	l = m.Shard.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	return n
}

func (m *RaftLocalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HardState)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	if m.LastIndex != 0 {
		n += 1 + sovRaftpb(uint64(m.LastIndex))
	}
	return n
}

func (m *RaftTruncatedState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRaftpb(uint64(m.Index))
	}
	if m.Term != 0 {
		n += 1 + sovRaftpb(uint64(m.Term))
	}
	return n
}

func (m *RaftApplyState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		n += 1 + sovRaftpb(uint64(m.AppliedIndex))
	}
	l = m.TruncatedState.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	return n
}

func (m *SnapshotMessageHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shard.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = m.From.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	if m.Term != 0 {
		n += 1 + sovRaftpb(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovRaftpb(uint64(m.Index))
	}
	return n
}

func (m *SnapshotMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovRaftpb(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaftpb(uint64(l))
	}
	if m.First {
		n += 2
	}
	if m.Last {
		n += 2
	}
	if m.FileSize != 0 {
		n += 1 + sovRaftpb(uint64(m.FileSize))
	}
	if m.CheckSum != 0 {
		n += 1 + sovRaftpb(uint64(m.CheckSum))
	}
	return n
}

func sovRaftpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftpb(x uint64) (n int) {
	return sovRaftpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShardEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTombstone = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSplit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableSplit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PeerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardState = append(m.HardState[:0], dAtA[iNdEx:postIndex]...)
			if m.HardState == nil {
				m.HardState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftTruncatedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftTruncatedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftTruncatedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftApplyState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftApplyState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftApplyState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TruncatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.First = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Last = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSum", wireType)
			}
			m.CheckSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftpb = fmt.Errorf("proto: unexpected end of group")
)
