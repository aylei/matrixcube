// Code generated by protoc-gen-gogo.
// source: errorpb.proto
// DO NOT EDIT!

/*
	Package errorpb is a generated protocol buffer package.

	It is generated from these files:
		errorpb.proto

	It has these top-level messages:
		NotLeader
		StoreNotMatch
		ShardNotFound
		KeyNotInShard
		StaleEpoch
		ServerIsBusy
		StaleCommand
		RaftEntryTooLarge
		Error
*/
package errorpb

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	metapb "github.com/deepfabric/beehive/pb/metapb"

	_ "github.com/gogo/protobuf/gogoproto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NotLeader the current shard peer is not leader
type NotLeader struct {
	ShardID uint64      `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Leader  metapb.Peer `protobuf:"bytes,2,opt,name=leader" json:"leader"`
}

func (m *NotLeader) Reset()                    { *m = NotLeader{} }
func (m *NotLeader) String() string            { return proto.CompactTextString(m) }
func (*NotLeader) ProtoMessage()               {}
func (*NotLeader) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{0} }

func (m *NotLeader) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *NotLeader) GetLeader() metapb.Peer {
	if m != nil {
		return m.Leader
	}
	return metapb.Peer{}
}

// StoreNotMatch current store is not match
type StoreNotMatch struct {
}

func (m *StoreNotMatch) Reset()                    { *m = StoreNotMatch{} }
func (m *StoreNotMatch) String() string            { return proto.CompactTextString(m) }
func (*StoreNotMatch) ProtoMessage()               {}
func (*StoreNotMatch) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{1} }

// ShardNotFound the shard replica is not found on the store
type ShardNotFound struct {
	ShardID uint64 `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
}

func (m *ShardNotFound) Reset()                    { *m = ShardNotFound{} }
func (m *ShardNotFound) String() string            { return proto.CompactTextString(m) }
func (*ShardNotFound) ProtoMessage()               {}
func (*ShardNotFound) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{2} }

func (m *ShardNotFound) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

// KeyNotInShard the key is not found on the store
type KeyNotInShard struct {
	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ShardID uint64 `protobuf:"varint,2,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Start   []byte `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End     []byte `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *KeyNotInShard) Reset()                    { *m = KeyNotInShard{} }
func (m *KeyNotInShard) String() string            { return proto.CompactTextString(m) }
func (*KeyNotInShard) ProtoMessage()               {}
func (*KeyNotInShard) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{3} }

func (m *KeyNotInShard) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyNotInShard) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *KeyNotInShard) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *KeyNotInShard) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

// StaleEpoch the current shard peer is stale
type StaleEpoch struct {
	NewShards []metapb.Shard `protobuf:"bytes,1,rep,name=newShards" json:"newShards"`
}

func (m *StaleEpoch) Reset()                    { *m = StaleEpoch{} }
func (m *StaleEpoch) String() string            { return proto.CompactTextString(m) }
func (*StaleEpoch) ProtoMessage()               {}
func (*StaleEpoch) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{4} }

func (m *StaleEpoch) GetNewShards() []metapb.Shard {
	if m != nil {
		return m.NewShards
	}
	return nil
}

// ServerIsBusy the server is busy
type ServerIsBusy struct {
}

func (m *ServerIsBusy) Reset()                    { *m = ServerIsBusy{} }
func (m *ServerIsBusy) String() string            { return proto.CompactTextString(m) }
func (*ServerIsBusy) ProtoMessage()               {}
func (*ServerIsBusy) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{5} }

// StaleCommand the command is stale, need to retry
type StaleCommand struct {
}

func (m *StaleCommand) Reset()                    { *m = StaleCommand{} }
func (m *StaleCommand) String() string            { return proto.CompactTextString(m) }
func (*StaleCommand) ProtoMessage()               {}
func (*StaleCommand) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{6} }

// RaftEntryTooLarge raft entry is too large
type RaftEntryTooLarge struct {
	ShardID   uint64 `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	EntrySize uint64 `protobuf:"varint,2,opt,name=entrySize,proto3" json:"entrySize,omitempty"`
}

func (m *RaftEntryTooLarge) Reset()                    { *m = RaftEntryTooLarge{} }
func (m *RaftEntryTooLarge) String() string            { return proto.CompactTextString(m) }
func (*RaftEntryTooLarge) ProtoMessage()               {}
func (*RaftEntryTooLarge) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{7} }

func (m *RaftEntryTooLarge) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *RaftEntryTooLarge) GetEntrySize() uint64 {
	if m != nil {
		return m.EntrySize
	}
	return 0
}

// Error is a raft error
type Error struct {
	Message           string             `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	NotLeader         *NotLeader         `protobuf:"bytes,2,opt,name=notLeader" json:"notLeader,omitempty"`
	ShardNotFound     *ShardNotFound     `protobuf:"bytes,3,opt,name=shardNotFound" json:"shardNotFound,omitempty"`
	KeyNotInShard     *KeyNotInShard     `protobuf:"bytes,4,opt,name=KeyNotInShard" json:"KeyNotInShard,omitempty"`
	StaleEpoch        *StaleEpoch        `protobuf:"bytes,5,opt,name=staleEpoch" json:"staleEpoch,omitempty"`
	ServerIsBusy      *ServerIsBusy      `protobuf:"bytes,6,opt,name=serverIsBusy" json:"serverIsBusy,omitempty"`
	StaleCommand      *StaleCommand      `protobuf:"bytes,7,opt,name=staleCommand" json:"staleCommand,omitempty"`
	StoreNotMatch     *StoreNotMatch     `protobuf:"bytes,8,opt,name=storeNotMatch" json:"storeNotMatch,omitempty"`
	RaftEntryTooLarge *RaftEntryTooLarge `protobuf:"bytes,9,opt,name=raftEntryTooLarge" json:"raftEntryTooLarge,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{8} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetNotLeader() *NotLeader {
	if m != nil {
		return m.NotLeader
	}
	return nil
}

func (m *Error) GetShardNotFound() *ShardNotFound {
	if m != nil {
		return m.ShardNotFound
	}
	return nil
}

func (m *Error) GetKeyNotInShard() *KeyNotInShard {
	if m != nil {
		return m.KeyNotInShard
	}
	return nil
}

func (m *Error) GetStaleEpoch() *StaleEpoch {
	if m != nil {
		return m.StaleEpoch
	}
	return nil
}

func (m *Error) GetServerIsBusy() *ServerIsBusy {
	if m != nil {
		return m.ServerIsBusy
	}
	return nil
}

func (m *Error) GetStaleCommand() *StaleCommand {
	if m != nil {
		return m.StaleCommand
	}
	return nil
}

func (m *Error) GetStoreNotMatch() *StoreNotMatch {
	if m != nil {
		return m.StoreNotMatch
	}
	return nil
}

func (m *Error) GetRaftEntryTooLarge() *RaftEntryTooLarge {
	if m != nil {
		return m.RaftEntryTooLarge
	}
	return nil
}

func init() {
	proto.RegisterType((*NotLeader)(nil), "errorpb.NotLeader")
	proto.RegisterType((*StoreNotMatch)(nil), "errorpb.StoreNotMatch")
	proto.RegisterType((*ShardNotFound)(nil), "errorpb.ShardNotFound")
	proto.RegisterType((*KeyNotInShard)(nil), "errorpb.KeyNotInShard")
	proto.RegisterType((*StaleEpoch)(nil), "errorpb.StaleEpoch")
	proto.RegisterType((*ServerIsBusy)(nil), "errorpb.ServerIsBusy")
	proto.RegisterType((*StaleCommand)(nil), "errorpb.StaleCommand")
	proto.RegisterType((*RaftEntryTooLarge)(nil), "errorpb.RaftEntryTooLarge")
	proto.RegisterType((*Error)(nil), "errorpb.Error")
}
func (m *NotLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotLeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintErrorpb(dAtA, i, uint64(m.Leader.Size()))
	n1, err := m.Leader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *StoreNotMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreNotMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ShardNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardNotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	return i, nil
}

func (m *KeyNotInShard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyNotInShard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.ShardID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	if len(m.Start) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func (m *StaleEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleEpoch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewShards) > 0 {
		for _, msg := range m.NewShards {
			dAtA[i] = 0xa
			i++
			i = encodeVarintErrorpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServerIsBusy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerIsBusy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StaleCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RaftEntryTooLarge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftEntryTooLarge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	if m.EntrySize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.EntrySize))
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.NotLeader != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.NotLeader.Size()))
		n2, err := m.NotLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ShardNotFound != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardNotFound.Size()))
		n3, err := m.ShardNotFound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.KeyNotInShard != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.KeyNotInShard.Size()))
		n4, err := m.KeyNotInShard.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.StaleEpoch != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleEpoch.Size()))
		n5, err := m.StaleEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ServerIsBusy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ServerIsBusy.Size()))
		n6, err := m.ServerIsBusy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.StaleCommand != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleCommand.Size()))
		n7, err := m.StaleCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.StoreNotMatch != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StoreNotMatch.Size()))
		n8, err := m.StoreNotMatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.RaftEntryTooLarge != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RaftEntryTooLarge.Size()))
		n9, err := m.RaftEntryTooLarge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func encodeFixed64Errorpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Errorpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintErrorpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NotLeader) Size() (n int) {
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	l = m.Leader.Size()
	n += 1 + l + sovErrorpb(uint64(l))
	return n
}

func (m *StoreNotMatch) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ShardNotFound) Size() (n int) {
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	return n
}

func (m *KeyNotInShard) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *StaleEpoch) Size() (n int) {
	var l int
	_ = l
	if len(m.NewShards) > 0 {
		for _, e := range m.NewShards {
			l = e.Size()
			n += 1 + l + sovErrorpb(uint64(l))
		}
	}
	return n
}

func (m *ServerIsBusy) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StaleCommand) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RaftEntryTooLarge) Size() (n int) {
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	if m.EntrySize != 0 {
		n += 1 + sovErrorpb(uint64(m.EntrySize))
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ShardNotFound != nil {
		l = m.ShardNotFound.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.KeyNotInShard != nil {
		l = m.KeyNotInShard.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleEpoch != nil {
		l = m.StaleEpoch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ServerIsBusy != nil {
		l = m.ServerIsBusy.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleCommand != nil {
		l = m.StaleCommand.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StoreNotMatch != nil {
		l = m.StoreNotMatch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.RaftEntryTooLarge != nil {
		l = m.RaftEntryTooLarge.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func sovErrorpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErrorpb(x uint64) (n int) {
	return sovErrorpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreNotMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreNotMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreNotMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyNotInShard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyNotInShard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyNotInShard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewShards = append(m.NewShards, metapb.Shard{})
			if err := m.NewShards[len(m.NewShards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerIsBusy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerIsBusy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerIsBusy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftEntryTooLarge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftEntryTooLarge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftEntryTooLarge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntrySize", wireType)
			}
			m.EntrySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntrySize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotLeader == nil {
				m.NotLeader = &NotLeader{}
			}
			if err := m.NotLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardNotFound == nil {
				m.ShardNotFound = &ShardNotFound{}
			}
			if err := m.ShardNotFound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyNotInShard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyNotInShard == nil {
				m.KeyNotInShard = &KeyNotInShard{}
			}
			if err := m.KeyNotInShard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleEpoch == nil {
				m.StaleEpoch = &StaleEpoch{}
			}
			if err := m.StaleEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIsBusy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIsBusy == nil {
				m.ServerIsBusy = &ServerIsBusy{}
			}
			if err := m.ServerIsBusy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleCommand == nil {
				m.StaleCommand = &StaleCommand{}
			}
			if err := m.StaleCommand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreNotMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreNotMatch == nil {
				m.StoreNotMatch = &StoreNotMatch{}
			}
			if err := m.StoreNotMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftEntryTooLarge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftEntryTooLarge == nil {
				m.RaftEntryTooLarge = &RaftEntryTooLarge{}
			}
			if err := m.RaftEntryTooLarge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrorpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErrorpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrorpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrorpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrorpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrorpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("errorpb.proto", fileDescriptorErrorpb) }

var fileDescriptorErrorpb = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xa6, 0xcb, 0x9f, 0x3d, 0x50, 0x75, 0xeb, 0x6a, 0x26, 0xc4, 0x20, 0xe9, 0x15, 0x9a, 0x08,
	0xca, 0x7a, 0x63, 0x62, 0x62, 0x82, 0x62, 0x24, 0xbb, 0x12, 0x1d, 0x7c, 0x81, 0x29, 0x3d, 0xfc,
	0xc4, 0xa5, 0x43, 0xa6, 0xc3, 0x1a, 0xbc, 0xf4, 0x09, 0x7c, 0xac, 0xbd, 0xdc, 0x27, 0x30, 0x8a,
	0x2f, 0x62, 0x7a, 0x28, 0xed, 0x94, 0x8d, 0x5e, 0x31, 0x67, 0xce, 0xf7, 0x7d, 0x87, 0xf9, 0xbe,
	0x53, 0x70, 0x50, 0x29, 0xa9, 0x56, 0x7e, 0x67, 0xa5, 0xa4, 0x96, 0x6e, 0x35, 0x29, 0x1b, 0x2f,
	0x66, 0x0b, 0x3d, 0x5f, 0xfb, 0x9d, 0x89, 0x5c, 0x76, 0x03, 0xc4, 0xd5, 0x54, 0xf8, 0x6a, 0x31,
	0xe9, 0xfa, 0x88, 0xf3, 0xc5, 0x25, 0x76, 0x57, 0x7e, 0x77, 0x89, 0x5a, 0xa4, 0x3f, 0x3b, 0x7a,
	0xe3, 0xa9, 0xc1, 0x9a, 0xc9, 0x99, 0xec, 0xd2, 0xb5, 0xbf, 0x9e, 0x52, 0x45, 0x05, 0x9d, 0x76,
	0x70, 0xef, 0x13, 0xd8, 0x23, 0xa9, 0xcf, 0x51, 0x04, 0xa8, 0x5c, 0x06, 0xd5, 0x68, 0x2e, 0x54,
	0x30, 0x7c, 0xcb, 0xac, 0x96, 0xd5, 0x2e, 0xf1, 0x7d, 0xe9, 0x3e, 0x81, 0xca, 0x05, 0x61, 0xd8,
	0x51, 0xcb, 0x6a, 0xd7, 0x7a, 0xf5, 0x4e, 0x32, 0xf4, 0x23, 0xa2, 0xea, 0x97, 0xae, 0x7e, 0x3e,
	0x2a, 0xf0, 0x04, 0xe1, 0xdd, 0x01, 0x67, 0xac, 0xa5, 0xc2, 0x91, 0xd4, 0x1f, 0x84, 0x9e, 0xcc,
	0xbd, 0xc7, 0xe0, 0x8c, 0x63, 0x9d, 0x91, 0xd4, 0xef, 0xe4, 0x3a, 0x0c, 0xfe, 0x3d, 0xc7, 0x9b,
	0x80, 0x73, 0x86, 0x9b, 0x91, 0xd4, 0xc3, 0x90, 0x28, 0xee, 0x5d, 0x28, 0x7e, 0xc1, 0x0d, 0xc1,
	0xea, 0x3c, 0x3e, 0x9a, 0xe4, 0xa3, 0xfc, 0x9f, 0x3c, 0x81, 0x72, 0xa4, 0x85, 0xd2, 0xac, 0x48,
	0xe8, 0x5d, 0x11, 0x2b, 0x60, 0x18, 0xb0, 0xd2, 0x4e, 0x01, 0xc3, 0xc0, 0x7b, 0x0d, 0x30, 0xd6,
	0xe2, 0x02, 0x07, 0x2b, 0x39, 0x99, 0xbb, 0xcf, 0xc1, 0x0e, 0xf1, 0x2b, 0x4d, 0x8b, 0x98, 0xd5,
	0x2a, 0xb6, 0x6b, 0x3d, 0x67, 0xff, 0x3a, 0xba, 0x4d, 0x9e, 0x97, 0xa1, 0xbc, 0xdb, 0x50, 0x1f,
	0xa3, 0xba, 0x44, 0x35, 0x8c, 0xfa, 0xeb, 0x68, 0x43, 0x75, 0x2c, 0xf8, 0x46, 0x2e, 0x97, 0x22,
	0x0c, 0xbc, 0x33, 0x38, 0xe6, 0x62, 0xaa, 0x07, 0xa1, 0x56, 0x9b, 0xcf, 0x52, 0x9e, 0x0b, 0x35,
	0xc3, 0xff, 0x98, 0xfb, 0x10, 0x6c, 0x8c, 0xa1, 0xe3, 0xc5, 0x37, 0x4c, 0xde, 0x94, 0x5d, 0x78,
	0xdf, 0x4b, 0x50, 0x1e, 0xc4, 0x2b, 0x11, 0x2b, 0x2c, 0x31, 0x8a, 0xc4, 0x0c, 0x49, 0xc1, 0xe6,
	0xfb, 0xd2, 0x7d, 0x06, 0x76, 0xb8, 0x4f, 0x31, 0x49, 0xc8, 0xed, 0xec, 0xd7, 0x2a, 0xcd, 0x97,
	0x67, 0x20, 0xf7, 0x15, 0x38, 0x91, 0x99, 0x09, 0x79, 0x56, 0xeb, 0x3d, 0x48, 0x59, 0xb9, 0xc4,
	0x78, 0x1e, 0x1c, 0xb3, 0x73, 0x31, 0x91, 0xbb, 0x26, 0x3b, 0xd7, 0xe5, 0x07, 0x99, 0x9e, 0x02,
	0x44, 0xa9, 0xff, 0xac, 0x4c, 0xd4, 0x7b, 0xd9, 0xe0, 0xb4, 0xc5, 0x0d, 0x98, 0xfb, 0x12, 0xea,
	0x91, 0xe1, 0x39, 0xab, 0x10, 0xed, 0x7e, 0x46, 0x33, 0x9a, 0x3c, 0x07, 0x25, 0xaa, 0x11, 0x0f,
	0xab, 0x1e, 0x52, 0x8d, 0x26, 0xcf, 0x41, 0xc9, 0x26, 0x73, 0x97, 0xd9, 0xad, 0x43, 0x9b, 0xcc,
	0x2e, 0xcf, 0x83, 0xdd, 0xf7, 0x70, 0xac, 0x0e, 0xf7, 0x80, 0xd9, 0xa4, 0xd0, 0x48, 0x15, 0x6e,
	0x6c, 0x0a, 0xbf, 0x49, 0xea, 0x9f, 0x5c, 0xff, 0x6e, 0x16, 0xae, 0xb6, 0x4d, 0xeb, 0x7a, 0xdb,
	0xb4, 0x7e, 0x6d, 0x9b, 0xd6, 0x8f, 0x3f, 0xcd, 0x82, 0x5f, 0xa1, 0x6f, 0xf8, 0xf4, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x0a, 0x2a, 0x5a, 0x71, 0x42, 0x04, 0x00, 0x00,
}
